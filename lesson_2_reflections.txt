What happens when you initialize a repository? Why do you need to do it?
- It creates the meta info for git use in a hidden folder called ".git".
- Without doing git init, the directory is just an ordinary directory/folder.

How is the staging area different from the working directory and the repository? What value do you think it offers?
- It's a git managed snapshot area that track additions of new files to a repo.
- It helps to provide a working area for you to roll back files you may not want to commit to a repo, making the repo commit history easier to understand.

How can you use the staging area to make sure you have one commit per logical change?
- After making a change to a file, run git add to stage the change to staging area;
- Then run git commit to commit to the git repo.
- This way, there wil always be 1 commit to any single (logical) change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
- Branches help to logically organise a chunk of work to accomplish a certain goal
- Using branches for changes related to that goal makes the commit history organised against that branch and not pollute the main "trunk", i.e. the master branch.

How do the diagrams help you visualize the branch structure?
- Diagrams help by showning visually which branches are inter-related along with their commits history.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
- Merges all the codes and commit history of the 2 branches together with the checked out branch being the one being merged into
- Use git log --graph --oneline to visual the commit history being merged from the 2 branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
- Pros of automatic merging --> no need for manual interventions and saves time if 100% accurate all the time
- Cons of automatic merging --> not technically possible and also if forcefuly done, will cause more error to program codes
- Pros of always doing merges manually --> you have full control of what to merge and not to merge
- Cons of always doing merges manually --> unproductive and still can be error prone if always done manually.